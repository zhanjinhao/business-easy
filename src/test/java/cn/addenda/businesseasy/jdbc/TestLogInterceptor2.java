package cn.addenda.businesseasy.jdbc;

import cn.addenda.businesseasy.jdbc.interceptor.InterceptorAdapter;
import com.alibaba.druid.filter.FilterChain;
import com.alibaba.druid.proxy.jdbc.ConnectionProxy;
import com.alibaba.druid.proxy.jdbc.PreparedStatementProxy;
import lombok.extern.slf4j.Slf4j;

import java.sql.SQLException;

/**
 * @author addenda
 * @datetime 2023/4/22 21:36
 */
@Slf4j
public class TestLogInterceptor2 extends InterceptorAdapter {

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql) throws SQLException {
        log.info("before test log2");
        PreparedStatementProxy preparedStatementProxy = super.connection_prepareStatement(chain, connection, sql);
        log.info("after test log2");

        return preparedStatementProxy;
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql, int autoGeneratedKeys) throws SQLException {
        log.info("before test log2");
        PreparedStatementProxy preparedStatementProxy = super.connection_prepareStatement(chain, connection, sql, autoGeneratedKeys);
        log.info("after test log2");
        return preparedStatementProxy;
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        log.info("before test log2");
        PreparedStatementProxy preparedStatementProxy = super.connection_prepareStatement(chain, connection, sql, resultSetType, resultSetConcurrency);
        log.info("after test log2");
        return preparedStatementProxy;
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        log.info("before test log2");
        PreparedStatementProxy preparedStatementProxy = super.connection_prepareStatement(chain, connection, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        log.info("after test log2");
        return preparedStatementProxy;
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql, int[] columnIndexes) throws SQLException {
        log.info("before test log2");
        PreparedStatementProxy preparedStatementProxy = super.connection_prepareStatement(chain, connection, sql, columnIndexes);
        log.info("after test log2");
        return preparedStatementProxy;
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql, String[] columnNames) throws SQLException {
        log.info("before test log2");
        PreparedStatementProxy preparedStatementProxy = super.connection_prepareStatement(chain, connection, sql, columnNames);
        log.info("after test log2");
        return preparedStatementProxy;
    }

}
